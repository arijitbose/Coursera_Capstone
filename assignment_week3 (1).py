# -*- coding: utf-8 -*-
"""Assignment_Week3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FR0LkPO6DCbbzRSo_AqL9XIuKyYoq4yE
"""

#In this cell I have loaded the first table from the given wikipedia website
import pandas as pd 

tables = pd.read_html("https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M")
x=pd.DataFrame(tables[0])
x

#In this cell I have deleted Borough rows with value equal to Not Assigned
z=x[x.Borough != 'Not assigned']
z

#In this cell I have reset the index
b=z.reset_index(inplace = True, drop = True)
z

#In this cell I have assigned Borough  values to those Neighbourhood values where Neighbourhoof values is not assigned

import numpy as np
z['Neighbourhood'] = np.where(z['Neighbourhood'] == 'Not assigned', z['Borough'], z['Neighbourhood'])
z

#In this cell, I have aggregated the last column values separated by "," based on GroupBy of the Fields Postcode and Borough
#The resulting dataframe "z_final" is the solution to Question1
z_final = z.groupby(['Postcode','Borough'], sort=False).agg( ', '.join)
z_final

#In this cell I have retrieved the first 15 rows of the datafrane using head function after resetting the Index
#The resulting dataframe "z_final1" is the solution to Question1
z_final1=z_final.reset_index()
z_final1.head(15)

#In this cell I found out the shape of the DataFrame "z_final1"
z_final1.shape

#Here I have used code to upload "Geospatial_Coordinates.csv" in Google Colab
from google.colab import files
uploaded = files.upload()

#Here I have converted the data in the CSV file "Geospatial_Coordinates.csv" into a DataFrame called y
import pandas as pd
import io
y = pd.read_csv(io.StringIO(uploaded['Geospatial_Coordinates.csv'].decode('utf-8')))
y

#Here I have done a VLOOKUP of the Postcode Column to dervice Longitude and Latitude values of each row and named the resulting DataFrame as "x".
#This cells output is the solution to the second Question
x = pd.merge(z_final1, y)
x

#Here I have loaded necessay Libraries
import numpy as np # library to handle data in a vectorized manner

import pandas as pd # library for data analsysis
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

import json # library to handle JSON files

#!conda install -c conda-forge geopy --yes # uncomment this line if you haven't completed the Foursquare API lab
from geopy.geocoders import Nominatim # convert an address into latitude and longitude values

import requests # library to handle requests
from pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe

# Matplotlib and associated plotting modules
import matplotlib.cm as cm
import matplotlib.colors as colors

#In this cell I found out the Logitude and latitude of "Toronto"
address = 'Toronto'

geolocator = Nominatim(user_agent="Toronto_explorer")
location = geolocator.geocode(address)
latitude = location.latitude
longitude = location.longitude
print('The geograpical coordinate of Toronto are {}, {}.'.format(latitude, longitude))

#Imported Folium Library here
import folium

# create map of Toronto using latitude and longitude values
map_toronto = folium.Map(location=[latitude, longitude], zoom_start=10)

# add markers to map
for lat, lng, borough, neighbourhood in zip(x['Latitude'], x['Longitude'], x['Borough'], x['Neighbourhood']):
    label = '{}, {}'.format(neighbourhood, borough)
    label = folium.Popup(label, parse_html=True)
    folium.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        color='blue',
        fill=True,
        fill_color='#3186cc',
        fill_opacity=0.7,
        parse_html=False).add_to(map_toronto)  
    
map_toronto

CLIENT_ID = 'BKUWVB2JFJVKFKMXM2WML5LOTVOWI02DSDXEWMUA5FJU4I53' # your Foursquare ID
CLIENT_SECRET = 'EUKAIIKFMQVF3OMPTSADJS2PFAT0WHSCJ2MBW3RYD1K52IU3' # your Foursquare Secret
VERSION = '20180605' # Foursquare API version

print('Your credentails:')
print('CLIENT_ID: ' + CLIENT_ID)
print('CLIENT_SECRET:' + CLIENT_SECRET)

#Let's explore the first neighborhood in our dataframe.
#Get the neighborhood's name.

x.loc[0, 'Neighbourhood']

#Get the neighborhood's latitude and longitude values.
neighborhood_latitude = x.loc[0, 'Latitude'] # neighborhood latitude value
neighborhood_longitude = x.loc[0, 'Longitude'] # neighborhood longitude value

neighborhood_name = x.loc[0, 'Neighbourhood'] # neighborhood name

print('Latitude and longitude values of {} are {}, {}.'.format(neighborhood_name, 
                                                               neighborhood_latitude, 
                                                               neighborhood_longitude))

LIMIT = 100 # limit of number of venues returned by Foursquare API

radius = 1000 # define radius
# create URL
url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(
    CLIENT_ID, 
    CLIENT_SECRET, 
    VERSION, 
    neighborhood_latitude, 
    neighborhood_longitude, 
    radius, 
    LIMIT)
url # display URL

results = requests.get(url).json()
results

# function that extracts the category of the venue
def get_category_type(row):
    try:
        categories_list = row['categories']
    except:
        categories_list = row['venue.categories']
        
    if len(categories_list) == 0:
        return None
    else:
        return categories_list[0]['name']

venues = results['response']['groups'][0]['items']
    
nearby_venues = json_normalize(venues) # flatten JSON

# filter columns
filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']
nearby_venues =nearby_venues.loc[:, filtered_columns]

# filter the category for each row
nearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)

# clean columns
nearby_venues.columns = [col.split(".")[-1] for col in nearby_venues.columns]

nearby_venues.head()

print('{} venues were returned by Foursquare.'.format(nearby_venues.shape[0]))

# Explore Neighborhoods in Toronto
def getNearbyVenues(names, latitudes, longitudes, radius=500):
    
    venues_list=[]
    for name, lat, lng in zip(names, latitudes, longitudes):
        print(name)
            
        # create the API request URL
        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(
            CLIENT_ID, 
            CLIENT_SECRET, 
            VERSION, 
            lat, 
            lng, 
            radius, 
            LIMIT)
            
        # make the GET request
        results = requests.get(url).json()["response"]['groups'][0]['items']
        
        # return only relevant information for each nearby venue
        venues_list.append([(
            name, 
            lat, 
            lng, 
            v['venue']['name'], 
            v['venue']['location']['lat'], 
            v['venue']['location']['lng'],  
            v['venue']['categories'][0]['name']) for v in results])

    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])
    nearby_venues.columns = ['Neighborhood', 
                  'Neighborhood Latitude', 
                  'Neighborhood Longitude', 
                  'Venue', 
                  'Venue Latitude', 
                  'Venue Longitude', 
                  'Venue Category']
    
    return(nearby_venues)

toronto_venues = getNearbyVenues(names=x['Neighbourhood'],
                                   latitudes=x['Latitude'],
                                   longitudes=x['Longitude']
                                  )

print(toronto_venues.shape)
toronto_venues.head()

toronto_venues.groupby('Neighborhood').count()



print('There are {} uniques categories.'.format(len(toronto_venues['Venue Category'].unique())))

# one hot encoding
toronto_onehot = pd.get_dummies(toronto_venues[['Venue Category']], prefix="", prefix_sep="")

# add neighborhood column back to dataframe
toronto_onehot['Neighborhood'] = toronto_venues['Neighborhood'] 

# move neighborhood column to the first column
fixed_columns = [toronto_onehot.columns[-1]] + list(toronto_onehot.columns[:-1])
toronto_onehot = toronto_onehot[fixed_columns]

toronto_onehot.head()

toronto_onehot.shape

#Next, let's group rows by neighborhood and by taking the mean of the frequency of occurrence of each category
toronto_grouped = toronto_onehot.groupby('Neighborhood').mean().reset_index()
toronto_grouped

toronto_grouped.shape

#Let's print each neighborhood along with the top 5 most common venue
num_top_venues = 5

for hood in toronto_grouped['Neighborhood']:
    print("----"+hood+"----")
    temp = toronto_grouped[toronto_grouped['Neighborhood'] == hood].T.reset_index()
    temp.columns = ['venue','freq']
    temp = temp.iloc[1:]
    temp['freq'] = temp['freq'].astype(float)
    temp = temp.round({'freq': 2})
    print(temp.sort_values('freq', ascending=False).reset_index(drop=True).head(num_top_venues))
    print('\n')

def return_most_common_venues(row, num_top_venues):
    row_categories = row.iloc[1:]
    row_categories_sorted = row_categories.sort_values(ascending=False)
    
    return row_categories_sorted.index.values[0:num_top_venues]

num_top_venues = 10

indicators = ['st', 'nd', 'rd']

# create columns according to number of top venues
columns = ['Neighborhood']
for ind in np.arange(num_top_venues):
    try:
        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))
    except:
        columns.append('{}th Most Common Venue'.format(ind+1))

# create a new dataframe
neighborhoods_venues_sorted = pd.DataFrame(columns=columns)
neighborhoods_venues_sorted['Neighborhood'] = toronto_grouped['Neighborhood']

for ind in np.arange(toronto_grouped.shape[0]):
    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(toronto_grouped.iloc[ind, :], num_top_venues)

neighborhoods_venues_sorted.head()

from sklearn.cluster import KMeans

#Here I have used Kmean Clustering Algorithm for Tornonto Neighbourhoods
# set number of clusters
kclusters = 5

toronto_grouped_clustering = toronto_grouped.drop('Neighborhood', 1)

# run k-means clustering
kmeans = KMeans(n_clusters=kclusters, random_state=0).fit(toronto_grouped_clustering)

# check cluster labels generated for each row in the dataframe
kmeans.labels_[0:10]

# add clustering labels
neighborhoods_venues_sorted.insert(0, 'Cluster Labelss', kmeans.labels_)

toronto_merged = x

# merge toronto_grouped with toronto_data to add latitude/longitude for each neighborhood
toronto_merged = toronto_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighbourhood')

#toronto_merged.head() # check the last columns!

#toronto_merged.dropna(['Cluster Labels6', 'Cluster Labels5','Cluster Labels4','Cluster Labels3','Cluster Labels2','Cluster Labels1'], axis=1)
toronto_merged.head()

# create map
map_clusters = folium.Map(location=[latitude, longitude], zoom_start=11)

# set color scheme for the clusters
x = np.arange(kclusters)
ys = [i + x + (i*x)**2 for i in range(kclusters)]
colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))
rainbow = [colors.rgb2hex(i) for i in colors_array]

# add markers to the map
markers_colors = []
for lat, lon, poi, cluster in zip(toronto_merged['Latitude'], toronto_merged['Longitude'], toronto_merged['Neighbourhood'], toronto_merged['Cluster Labelss']):
    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)
    folium.CircleMarker(
        [lat, lon],
        radius=5,
        popup=label,
        color='blue',
        fill=True,
        fill_color='#3186cc',
        fill_opacity=0.7).add_to(map_clusters)
       
map_clusters

#Here I have examined Boroughs with Cluster Labelss ==0
#Examine  Cluster labelss==1
toronto_merged.loc[toronto_merged['Cluster Labelss'] == 0, toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]

#Here I have examined Boroughs with Cluster Labelss ==1
#Examine  Cluster labelss==1
toronto_merged.loc[toronto_merged['Cluster Labelss'] == 1, toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]

#Here I have examined Boroughs with Cluster Labelss ==2
#Examine  Cluster labelss==2

toronto_merged.loc[toronto_merged['Cluster Labelss'] == 2, toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]

#Here I have examined Boroughs with Cluster Labelss ==3
#Examine  Cluster labelss==3
toronto_merged.loc[toronto_merged['Cluster Labelss'] == 3, toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]

#Here I have examined Boroughs with Cluster Labelss ==4
#Examine  Cluster labelss==4
toronto_merged.loc[toronto_merged['Cluster Labelss'] == 4, toronto_merged.columns[[1] + list(range(5, toronto_merged.shape[1]))]]